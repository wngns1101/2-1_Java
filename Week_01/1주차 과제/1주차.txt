2. 자바의 특징
   - 이식성이 높다(windows -> 리눅스로 사용 가능)
   - 객체 지향 언어(opp)
   - 함수적 스타일 코딩 지원(코드 간결하게 작성 가능)
   - 메모리를 자동으로 관리(사용하지 않는 객체 자동으로 메모리에서 제거)
   - 멀티 쓰레드 쉽게 구현 가능(작업 동시 처리)
   - 동적 로딩 지원(미리 객체를 만들지 않고 필요한 시점에 동적 로딩해 객체 생성)

3. 자바 개발 환경 구축
   자바 가상 기계(java virtual machine)
      - 실제 운영체제를 대신해서 자바 프로그램을 실행하는 가상의 운영체제
      - 운영체제는 자바 프로그램을 바로 실행할 수 없다
      - 자바 프로그램은 완전한 기계어가 아닌 중간 단계의 바이트 코드이다
      - 운영체제와 자바프로그램을 중계하는 jvm을 두어 여러 운영체제에서 동일한 실행 결과가 나오도록
        설계한 것이다
         java code > javac compiler > byte code > jvm > 운영체제(windows)
                                      (byte code는 하나이다)

   자바 개발 도구(jdk) 설치
      - jre(java runtime environment) = jvm + 표준 클래스 라이브러리(api)
                      (자바 프로그램을 실행만 할 경우 설치)
      - jdk(java development kit) = jre + 개발에 필요한 도구
                      (자바 프로그램을 개발하고 실행하기 위해 반드시 설치)
   
   자바 프로그램 개발 순서
      - .java 소스 파일 작성> 컴파일러(javac.exe)로 바이트 코드 파일(.class) 생성 > jvm(java.exe) 구동 명령어 실행

4. hello java
   클래스 정의
      - 자바 프로그램은 확장자가 .java인 소스파일을 만들어서 자바 문법에 맞는 내용을 기술해야 한다
      - class를 하나의 단위로 프로그램을 작성하므로 자바 소스파일 안에 class를 정의해야 한다
      - class와 소스파일 명은 동일해야 한다
   main 메소드 정의
      - 프로그램의 시작지점이다
      - 자바 프로그램을 실행시키면 main함수 내부에 기술된 내용들을 순차적으로 수행한다
   public static void main(String[] args)
      - public: 누구나 접근 가능하도록 하기 위한 예약어로 접근 지정자의 일종
      - static: static으로 선언된 메소드는 클래스만 존재하면 수행할 수 있도록 한다
      - void: 값을 갖지 않는다는 의미를 갖는 자료 형태이다
      - main: 자바는 jvm에 의해서 실행되는데 자바 어플리케이션을 실행시키면 jvm은 main 메소드를
	    찾아 내부에 기술된 내용들을 순차적으로 실행한다
                그래 main 메소드를 프로그램의 시작점이라고 한다
      - String[] args: 메소드를 실행시키기 위해 데이터를 전달받아야 할 경우 사용되는 파라미터
                          () 안에 기술하며(데이터타입 데이터저장변수) 형태로 기술

6. 이클립스 설치
   - java ide
   workspace(이클립스에서 생성한 프로젝트가 기본적으로 저장되는 디렉토리)
   .metadata 디렉토리
      - 자동 생성되며 이클립스 실행 시 필요한 메타데이터 저장
      - 이 디렉토리 삭제하고 이클립스 실행 - 초기 상태로 다시 실행


